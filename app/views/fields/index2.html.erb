<!DOCTYPE html>
<html lang="en">
<head>
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="styles.css"> <!-- Arquivo CSS personalizado -->
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <%= csrf_meta_tags %>

  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background-color: #f4f4f4;
    }
    #three-js-container {
      width: 100%;
      height: 600px;
      background-color: #e0e0e0;
    }
    #modal {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 400px;
      background-color: white;
      padding: 20px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
      display: none;
      z-index: 10;
    }
    #modal h2 {
      margin-top: 0;
    }
    #modal button {
      margin-top: 10px;
      padding: 5px 10px;
      cursor: pointer;
    }
    #overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: none;
      z-index: 9;
    }
    label {
      display: block;
      margin-top: 10px;
    }
    input {
      width: 100%;
      padding: 8px;
      margin-top: 5px;
    }
  </style>
</head>
<body>
  <div id="three-js-container"></div>

  <!-- Modal -->
  <div id="overlay"></div>
  <div id="modal">
    <h2>Adicionar Terreno</h2>
    <form id="field-form">
      <label for="field-name">Nome do Terreno:</label>
      <input type="text" id="field-name" name="field-name" required>
      <label for="field-type">Tipo de Plantação:</label>
      <input type="text" id="field-type" name="field-type" required>
      <button type="submit">Salvar</button>
    </form>
  </div>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/build/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const container = document.getElementById('three-js-container');
      const overlay = document.getElementById('overlay');
      const modal = document.getElementById('modal');
      const fieldForm = document.getElementById('field-form');
      const fieldNameInput = document.getElementById('field-name');
      const fieldTypeInput = document.getElementById('field-type');
      let selectedFieldId = null;

      // Configuração do Three.js
      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(50, container.clientWidth / container.clientHeight, 0.1, 1000);
      const renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(container.clientWidth, container.clientHeight);
      container.appendChild(renderer.domElement);

      const controls = new THREE.OrbitControls(camera, renderer.domElement);
      controls.enableDamping = true;

      const light = new THREE.AmbientLight(0xffffff, 0.8);
      scene.add(light);

      const loader = new THREE.GLTFLoader();
      loader.load(
        'cenario/scene.gltf',
        (gltf) => {
          const model = gltf.scene;
          model.scale.set(200, 200, 200);
          model.position.set(0, 0, 0);
          scene.add(model);

          // Ajustar câmera
          const box = new THREE.Box3().setFromObject(model);
          const center = box.getCenter(new THREE.Vector3());
          camera.position.set(center.x + 150, center.y + 100, center.z + 150);
          camera.lookAt(center);
        },
        undefined,
        (error) => console.error('Erro ao carregar o cenário:', error)
      );

      // Posições dos campos
      const fieldPositions = [
        { id: 1, x: 55, y: 0, z: 55 },  // Campo superior esquerdo
        { id: 2, x: 30, y: 0, z: 55 },   // Campo superior central
        { id: 3, x: 55, y: 0, z: -55 },  // Campo superior direito
        { id: 4, x: 55, y: 0, z: 0 },  // Campo do meio esquerdo
        { id: 5, x: 0, y: 0, z: -55 },    // Campo do meio central
        { id: 6, x: -55, y: 0, z: -30 },   // Campo do meio direito

      ];

      // Criar um sprite de "+" para os campos
      const createIcon = (position, id) => {
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        canvas.width = 256;
        canvas.height = 256;

        context.fillStyle = 'rgba(255, 255, 255, 0)';
        context.fillRect(0, 0, canvas.width, canvas.height);
        context.fillStyle = 'red';
        context.font = 'bold 96px Arial';
        context.textAlign = 'center';
        context.textBaseline = 'middle';
        context.fillText('+', canvas.width / 2, canvas.height / 2);

        const texture = new THREE.CanvasTexture(canvas);
        const material = new THREE.SpriteMaterial({ map: texture });
        const sprite = new THREE.Sprite(material);
        sprite.scale.set(20, 20, 1);
        sprite.position.set(position.x, position.y + 5, position.z);
        sprite.userData = { fieldId: id };
        scene.add(sprite);
      };

      // Adicionar ícones de "+" ao cenário
      fieldPositions.forEach(pos => createIcon(pos, pos.id));

      // Detectar cliques nos ícones
      const raycaster = new THREE.Raycaster();
      const mouse = new THREE.Vector2();

      window.addEventListener('click', (event) => {
        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

        raycaster.setFromCamera(mouse, camera);
        const intersects = raycaster.intersectObjects(scene.children, true);

        if (intersects.length > 0) {
          const object = intersects[0].object;
          if (object.userData && object.userData.fieldId) {
            selectedFieldId = object.userData.fieldId;

            // Abrir modal para adicionar terreno
            overlay.style.display = 'block';
            modal.style.display = 'block';
            console.log(`Campo selecionado: ${selectedFieldId}`);
          }
        }
      });

      // Fechar modal e atualizar cena
fieldForm.addEventListener('submit', (e) => {
  e.preventDefault();

  const fieldName = fieldNameInput.value;
  const fieldType = fieldTypeInput.value;
  const selectedPosition = fieldPositions.find(pos => pos.id === selectedFieldId);

  // Enviar dados para o backend via fetch API
  fetch('/fields', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
    },
    body: JSON.stringify({
      field: {
        name: fieldName,
        field_type: fieldType,
        position_x: selectedPosition.x,
        position_y: selectedPosition.y,
        position_z: selectedPosition.z
      }
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.status === 'success') {
      alert(`Terreno criado: ${fieldName} - ${fieldType}`);
      overlay.style.display = 'none';
      modal.style.display = 'none';
      location.reload(); // Recarregar para atualizar o cenário
    } else {
      alert('Erro ao salvar o terreno!');
    }
  })
  .catch(error => {
    console.error('Erro ao enviar dados:', error);
    alert('Ocorreu um erro ao salvar o terreno.');
  });

  // Limpar o formulário
  fieldNameInput.value = '';
  fieldTypeInput.value = '';
});


      // Render loop
      const animate = () => {
        controls.update();
        renderer.render(scene, camera);
        requestAnimationFrame(animate);
      };
      animate();
    });
  </script>
</body>
</html>
