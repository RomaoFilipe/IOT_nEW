<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cenário 3D - Agricultura Inteligente</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/build/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
</head>
<body>
  <div class="container mt-5">
    <button id="add-field-btn" class="btn btn-success mb-3">Adicionar Terreno</button>
    <div id="modal" style="display: none;" class="card p-4">
      <h2>Adicionar Terreno</h2>
<form id="field-form">
  <label for="field-name">Nome do Terreno:</label>
  <input type="text" id="field-name" class="form-control" required>

  <label for="field-type" class="mt-2">Tipo de Plantação:</label>
  <input type="text" id="field-type" class="form-control" required>

  <label for="model-path" class="mt-2">Tipo de Modelo 3D:</label>
  <select id="model-path" class="form-control">
    <option value="trigo2/scene.gltf">Trigo</option>
    <option value="PlaneQuadrado/scene.gltf">Plane Quadrado</option>
  </select>

  <button type="submit" class="btn btn-primary mt-3">Salvar</button>
  <button type="button" id="close-modal" class="btn btn-secondary mt-3">Fechar</button>
</form>

    </div>
    <div id="three-js-container" style="width: 100%; height: 600px;"></div>
  </div>

 <script>
document.addEventListener('DOMContentLoaded', () => {
  const container = document.getElementById('three-js-container');
  const modal = document.getElementById('modal');
  const fieldForm = document.getElementById('field-form');
  const addFieldBtn = document.getElementById('add-field-btn');
  const closeModalBtn = document.getElementById('close-modal');
  const fieldNameInput = document.getElementById('field-name');
  const modelPathInput = document.getElementById('model-path');

  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(50, container.clientWidth / container.clientHeight, 0.1, 1000);
  const renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(container.clientWidth, container.clientHeight);
  container.appendChild(renderer.domElement);

  const controls = new THREE.OrbitControls(camera, renderer.domElement);
  controls.enableDamping = true;

  const light = new THREE.AmbientLight(0xffffff, 0.8);
  scene.add(light);

  const loader = new THREE.GLTFLoader();

  // Posições Predefinidas
  const predefinedPositions = {
    "trigo2/scene.gltf": [
      { x: -50, y: 0, z: 50 },
      { x: 50, y: 0, z: 50 }
    ],
    "PlaneQuadrado/scene.gltf": [
      { x: 58, y: 0, z: 57 },
      { x: 58, y: 0, z: 0 },
      { x: 0, y: 0, z: 0 },
      { x: -56, y: 0, z: 112 }
    ]
  };

  // Posições usadas para evitar duplicação
  let usedPositions = [];

  // Carregar o cenário principal
  loader.load('/cenario/scene.gltf', (gltf) => {
    const model = gltf.scene;
    model.scale.set(200, 200, 200);
    scene.add(model);
    camera.position.set(150, 100, 150);
    camera.lookAt(0, 0, 0);
  });

  // Carregar terrenos existentes
  const loadFields = () => {
    fetch('/fields.json')
      .then(response => response.json())
      .then(fields => {
        fields.forEach(field => {
          const modelPath = field.model_path;
          loader.load(`/${modelPath}`, (gltf) => {
            const model = gltf.scene;
            model.scale.set(200, 200, 200);
            model.position.set(field.position_x, field.position_y, field.position_z);
            scene.add(model);

            // Armazenar posições usadas
            usedPositions.push({
              x: field.position_x,
              y: field.position_y,
              z: field.position_z
            });
          });
        });
      });
  };
  loadFields();

  // Abrir e fechar modal
  addFieldBtn.addEventListener('click', () => modal.style.display = 'block');
  closeModalBtn.addEventListener('click', () => modal.style.display = 'none');

  // Submeter o formulário
  fieldForm.addEventListener('submit', (e) => {
    e.preventDefault();

    const fieldName = fieldNameInput.value;
    const modelPath = modelPathInput.value;

    // Encontrar a próxima posição disponível
    const availablePosition = predefinedPositions[modelPath].find(pos => 
      !usedPositions.some(used => 
        used.x === pos.x && used.y === pos.y && used.z === pos.z
      )
    );

    if (!availablePosition) {
      alert("Limite de terrenos atingido para este modelo!");
      return;
    }

    // Enviar para o backend
    fetch('/fields', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({
        field: {
          name: fieldName,
          field_type: "Terreno",
          position_x: availablePosition.x,
          position_y: availablePosition.y,
          position_z: availablePosition.z,
          model_path: modelPath
        }
      })
    })
    .then(response => {
      if (response.ok) {
        alert("Terreno adicionado com sucesso!");
        modal.style.display = 'none';
        location.reload();
      } else {
        throw new Error("Erro ao salvar o terreno.");
      }
    })
    .catch(error => {
      console.error("Erro ao salvar o terreno:", error);
      alert("Erro ao salvar o terreno.");
    });
  });

  // Animação
  const animate = () => {
    controls.update();
    renderer.render(scene, camera);
    requestAnimationFrame(animate);
  };
  animate();
});
</script>


</body>
</html>
