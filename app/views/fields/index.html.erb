<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cenário 3D - Agricultura Inteligente</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/build/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
  <style>
    #three-js-container {
      width: 100%;
      height: 600px;
      border: 1px solid #ccc;
      border-radius: 8px;
    }
  </style>
</head>
<body>
<div class="container mt-5">
  <!-- Botão para abrir o modal -->
  <button type="button" class="btn btn-success mb-3" data-bs-toggle="modal" data-bs-target="#fieldFormModal">
    Adicionar Terreno
  </button>

  <!-- Modal de Adicionar Terreno -->
  <div class="modal fade" id="fieldFormModal" tabindex="-1" aria-labelledby="fieldFormModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="fieldFormModalLabel">Adicionar Terreno</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="field-form">
            <input type="hidden" name="authenticity_token" value="<%= form_authenticity_token %>">
            <div class="mb-3">
              <label for="field-name" class="form-label">Nome do Terreno:</label>
              <input type="text" id="field-name" name="field[name]" class="form-control" required>
            </div>
            <div class="mb-3">
              <label for="field-type" class="form-label">Tipo de Plantação:</label>
              <input type="text" id="field-type" name="field[field_type]" class="form-control" required>
            </div>
            <div class="mb-3">
              <label for="model-path" class="form-label">Modelo 3D:</label>
              <select id="model-path" name="field[model_path]" class="form-select">
                <option value="trigo2/scene.gltf">Trigo</option>
                <option value="PlaneQuadrado/scene.gltf">Plane Quadrado</option>
              </select>
            </div>
            <button type="submit" class="btn btn-primary">Salvar</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Contêiner do Cenário 3D -->
  <div id="three-js-container"></div>

  <!-- Modal para Exibir Detalhes -->
  <div class="modal fade" id="fieldDetailsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="fieldDetailsModalLabel">Detalhes do Terreno</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <h4 id="modal-field-name">Nome do Terreno</h4>
          <p id="modal-field-type">Tipo de Plantação</p>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const container = document.getElementById('three-js-container');
      const fieldForm = document.getElementById('field-form');
      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(50, container.clientWidth / container.clientHeight, 0.1, 1000);
      const renderer = new THREE.WebGLRenderer({ antialias: true });
      const controls = new THREE.OrbitControls(camera, renderer.domElement);
      const loader = new THREE.GLTFLoader();
      
      renderer.setSize(container.clientWidth, container.clientHeight);
      container.appendChild(renderer.domElement);

      camera.position.set(150, 100, 150);
      camera.lookAt(0, 0, 0);
      controls.enableDamping = true;

      const light = new THREE.AmbientLight(0xffffff, 0.8);
      scene.add(light);

      // Carregar o cenário principal
      loader.load('/cenario/scene.gltf', (gltf) => {
        const model = gltf.scene;
        model.scale.set(200, 200, 200);
        scene.add(model);
      });

      const predefinedPositions = {
        "trigo2/scene.gltf": [
          { x: 0, y: 0, z: -2 },
          { x: 50, y: 0, z: 0 }
        ],
        "PlaneQuadrado/scene.gltf": [
          { x: 58, y: 0, z: 57 },
          { x: 58, y: 0, z: 0 },
          { x: 0, y: 0, z: 0 },
          { x: -56, y: 0, z: 112 }
        ]
      };

      // Função para limpar terrenos anteriores da cena
      const clearFieldsFromScene = () => {
        scene.children.forEach(child => {
          if (child.userData && child.userData.id) {
            scene.remove(child);
          }
        });
      };

      // Função para carregar terrenos
      const loadFields = () => {
        clearFieldsFromScene();
        fetch('/fields.json')
          .then(response => response.json())
          .then(fields => {
            console.log('Campos carregados:', fields);
            fields.forEach(field => {
              loader.load(`/${field.model_path}`, (gltf) => {
                const model = gltf.scene;
                model.scale.set(200, 200, 200);
                model.position.set(field.position_x, field.position_y, field.position_z);
                model.userData = {
                  id: field.id,
                  name: field.name,
                  type: field.field_type
                };
                scene.add(model);
              });
            });
          })
          .catch(error => console.error('Erro ao carregar os terrenos:', error));
      };

      loadFields();

      // Enviar formulário para adicionar terreno
      fieldForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const formData = new FormData(fieldForm);
        fetch('/fields', {
          method: 'POST',
          headers: {
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          },
          body: formData
        })
          .then(response => {
            if (response.ok) {
              alert('Terreno adicionado com sucesso!');
              loadFields(); // Atualizar terrenos na cena
            } else {
              response.json().then(data => {
                alert(`Erro ao adicionar o terreno: ${data.message || 'Erro desconhecido.'}`);
              });
            }
          })
          .catch(error => console.error('Erro ao salvar o terreno:', error));
      });

      

      // Animação
      const animate = () => {
        controls.update();
        renderer.render(scene, camera);
        requestAnimationFrame(animate);
      };
      animate();
      
    });
  </script>
</body>
</html>
