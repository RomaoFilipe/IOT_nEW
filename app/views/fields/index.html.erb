<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cenário 3D - Agricultura Inteligente</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/build/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

  <style>
    #three-js-container {
      width: 100%;
      height: 600px;
      border: 1px solid #ccc;
      border-radius: 8px;
    }
  </style>
</head>
<body>
<div class="container mt-5">
  <button type="button" class="btn btn-success mb-3" data-bs-toggle="modal" data-bs-target="#fieldFormModal">
    Adicionar Terreno
  </button>

  <div class="modal fade" id="fieldFormModal" tabindex="-1" aria-labelledby="fieldFormModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="fieldFormModalLabel">Adicionar Terreno</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="field-form">
            <div class="mb-3">
              <label for="field-name" class="form-label">Nome do Terreno:</label>
              <input type="text" id="field-name" name="field[name]" class="form-control" required>
            </div>
            <div class="mb-3">
              <label for="field-type" class="form-label">Tipo de Plantação:</label>
              <input type="text" id="field-type" name="field[field_type]" class="form-control" required>
            </div>
            <div class="mb-3">
              <label for="model-path" class="form-label">Modelo 3D:</label>
              <select id="model-path" name="field[model_path]" class="form-select">
                <option value="wheat">Trigo</option>
                <option value="corn">Milho</option>
                <option value="soy">Soja</option>
              </select>
            </div>
            <button type="submit" class="btn btn-primary">Salvar</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <div id="three-js-container"></div>

<% @fields.each do |field| %>
  <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#fieldDetailsModal-<%= field.id %>">
    Detalhes de <%= field.name %>
  </button>
  <%= render partial: "field_modal", locals: { field: field } %>
<% end %>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('three-js-container');
    const fieldForm = document.getElementById('field-form');

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(50, container.clientWidth / container.clientHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(container.clientWidth, container.clientHeight);
    renderer.setClearColor(0x87CEEB);
    container.appendChild(renderer.domElement);

    const controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;

    const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
    directionalLight.position.set(10, 10, 10);
    directionalLight.castShadow = true;
    scene.add(directionalLight);

    const ground = new THREE.Mesh(
      new THREE.PlaneGeometry(200, 200),
      new THREE.MeshStandardMaterial({ color: 0x228B22 })
    );
    ground.rotation.x = -Math.PI / 2;
    ground.receiveShadow = true;
    scene.add(ground);

    const gridSize = 4; // Número de terrenos por linha
    const offset = 30; // Distância entre os terrenos

    const findNextPosition = (index) => {
      const row = Math.floor(index / gridSize);
      const col = index % gridSize;
      const x = (col - gridSize / 2 + 0.5) * offset;
      const z = (row - gridSize / 2 + 0.5) * offset;
      return [x, 0.1, z];
    };

    fetch('/fields.json')
      .then(response => response.json())
      .then(fields => {
        fields.forEach((field, index) => {
          const position = findNextPosition(index);
          createField(field.name, field.field_type, field.model_path, position);
        });
      })
      .catch(error => console.error('Erro ao carregar campos:', error));

    const createField = (name, type, model, position) => {
      const fieldGroup = new THREE.Group();

      const base = new THREE.Mesh(
        new THREE.BoxGeometry(25, 0.1, 20),
        new THREE.MeshStandardMaterial({ color: "#3d2817" })
      );
      fieldGroup.add(base);

      const crops = createCrops(model);
      fieldGroup.add(crops);

      fieldGroup.position.set(...position);
      fieldGroup.userData = { name, type };
      scene.add(fieldGroup);
    };

    const createCrops = (model) => {
      const cropsGroup = new THREE.Group();
      const colors = {
        wheat: "#f4d03f",
        corn: "#27ae60",
        soy: "#82e0aa",
      };

      for (let x = -8; x < 8; x += 1.5) {
        for (let z = -6; z < 6; z += 1.5) {
          const height = model === "wheat" ? 1 + Math.random() * 0.5 : model === "corn" ? 2 + Math.random() * 0.7 : 1.2 + Math.random() * 0.4;
          const crop = createCropInstance(height, colors[model]);
          crop.position.set(x + Math.random() * 0.3, height / 2, z + Math.random() * 0.3);
          cropsGroup.add(crop);
        }
      }
      return cropsGroup;
    };

    const createCropInstance = (height, color) => {
      const crop = new THREE.Group();

      const stem = new THREE.Mesh(
        new THREE.CylinderGeometry(0.05, 0.05, height),
        new THREE.MeshStandardMaterial({ color: "#2ecc71" })
      );
      crop.add(stem);

      const top = new THREE.Mesh(
        new THREE.SphereGeometry(0.2),
        new THREE.MeshStandardMaterial({ color })
      );
      top.position.y = height / 2;
      crop.add(top);

      return crop;
    };

    fieldForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const formData = new FormData(fieldForm);

      fetch('/fields', {
        method: 'POST',
        headers: {
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        },
        body: formData
      })
        .then(response => {
          if (response.ok) {
            response.json().then((field) => {
              const fieldsCount = document.querySelectorAll('.btn-primary').length;
              const position = findNextPosition(fieldsCount);
              createField(field.name, field.field_type, field.model_path, position);
              alert('Terreno criado com sucesso!');
            });
          } else {
            alert('Erro ao criar terreno.');
          }
        })
        .catch(error => console.error('Erro ao salvar terreno:', error));
    });

    camera.position.set(90, 90, 90);
    camera.lookAt(0, 0, 0);

    const animate = () => {
      controls.update();
      renderer.render(scene, camera);
      requestAnimationFrame(animate);
    };
    animate();
  });
</script>

</body>
</html>
