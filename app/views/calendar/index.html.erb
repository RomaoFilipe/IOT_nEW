<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta name="csrf-token" content="<%= form_authenticity_token %>">

  <title>Agriculture Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" />
  <link rel="stylesheet" href="styles.css" />

  <style>
    body {
        margin: 0;
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
    }

    #three-js-container {
        width: 100%;
        height: 700px;
        background-color: #e0e0e0;
        border: 1px solid #ccc;
    }
  </style>
</head>

<body>
<div id="three-js-container"></div>

<!-- Importação do Three.js, GLTFLoader e OrbitControls -->
<script src="https://cdn.jsdelivr.net/npm/three@0.128.0/build/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const container = document.getElementById('three-js-container');

        if (container) {
            // Configuração da cena, câmera e renderizador
            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(50, container.clientWidth / container.clientHeight, 0.1, 1000);
            const renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(container.clientWidth, container.clientHeight);
            renderer.setClearColor(0xf4f4f4);
            container.appendChild(renderer.domElement);

            // Adicionar luz ambiente
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);
            scene.add(ambientLight);

            // Configurar controles Orbit
            const controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;
            controls.minDistance = 40;
            controls.maxDistance = 200;
            controls.maxPolarAngle = Math.PI / 2;

            // Carregar modelos GLTF
            const loader = new THREE.GLTFLoader();

            loader.load(
                'cenario/scene.gltf',
                (gltf) => {
                    const planeModel = gltf.scene;
                    planeModel.scale.set(200, 200, 200);
                    planeModel.position.set(0, 0, 0);
                    scene.add(planeModel);

                    // Calcular o centro e o tamanho do modelo
                    const planeBox = new THREE.Box3().setFromObject(planeModel);
                    const planeCenter = planeBox.getCenter(new THREE.Vector3());
                    const planeSize = planeBox.getSize(new THREE.Vector3());

                    // Ajustar a posição da câmera para uma visão isométrica
                    const distance = Math.max(planeSize.x, planeSize.y, planeSize.z) * 2.5;
                    camera.position.set(
                        planeCenter.x + distance / 2.5,
                        planeCenter.y + distance / 3,
                        planeCenter.z + distance / 2.5
                    );
                    camera.lookAt(planeCenter);

                    // Atualizar campo de visão (FOV) para capturar mais do cenário
                    camera.fov = 70; // Reduzido ligeiramente para abrir mais o campo de visão
                    camera.updateProjectionMatrix();

                    // Carregar modelo campo2/scene.gltf
                    loader.load(
                        'campo2/scene.gltf',
                        (gltf2) => {
                            const campModel = gltf2.scene;
                            campModel.scale.set(5, 5, 5);
                            campModel.position.set(0, 0, 0);
                            scene.add(campModel);

                            // Agrupar modelos para ajustar a câmera
                            const group = new THREE.Group();
                            group.add(planeModel);
                            group.add(campModel);
                            scene.add(group);

                            // Ajustar câmera para a visão final
                            const groupBox = new THREE.Box3().setFromObject(group);
                            const groupCenter = groupBox.getCenter(new THREE.Vector3());
                            const groupDistance = Math.max(groupBox.getSize(new THREE.Vector3()).x, groupBox.getSize(new THREE.Vector3()).y) * 2.5;

                            camera.position.set(
                                groupCenter.x + groupDistance / 2.5,
                                groupCenter.y + groupDistance / 2.2,
                                groupCenter.z + groupDistance / 2.5
                            );
                            camera.lookAt(groupCenter);
                        },
                        undefined,
                        (error) => console.error('Erro ao carregar o modelo campo2:', error)
                    );
                },
                undefined,
                (error) => console.error('Erro ao carregar o modelo cenario:', error)
            );

            // Atualizar renderizador e câmera ao redimensionar a janela
            window.addEventListener('resize', () => {
                const width = container.clientWidth;
                const height = container.clientHeight;
                camera.aspect = width / height;
                camera.updateProjectionMatrix();
                renderer.setSize(width, height);
                controls.update();
            });

            // Loop de animação
            function animate() {
                requestAnimationFrame(animate);
                controls.update();
                renderer.render(scene, camera);
            }
            animate();
        } else {
            console.error("O contêiner #three-js-container não foi encontrado.");
        }
    });
</script>
</body>
</html>
